#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

clean() {
  if command -v npm >/dev/null 2>&1; then
    npm cache clean --force
  fi

  if command -v n >/dev/null 2>&1; then
    n prune
    rm -rf "${HOME:?}/opt/bin/n"
  fi

  rm -rf "${HOME:?}/.babel.json"
  rm -rf "${HOME:?}/.node-gyp"
  rm -rf "${HOME:?}/.node_repl_history"
  rm -rf "${HOME:?}/.npm"
  rm -rf "${HOME:?}/.v8flags."*
}

install() {
  local SCRIPT_DIR
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

  if command -v brew >/dev/null 2>&1; then
    packages_install n
  else
    if ! command -v git >/dev/null 2>&1; then
      printf "git is required \n"
      exit
    fi

    if ! command -v make >/dev/null 2>&1; then
      printf "make is required \n"
      exit
    fi

    rm -rf "${HOME:?}/n-install"
    git clone --depth 1 "https://github.com/tj/n.git" "${HOME}/n-install"
    (cd "${HOME}/n-install" && PREFIX="${HOME}/opt" make install)
    rm -rf "${HOME:?}/n-install"
  fi

  mkdir -p "${HOME:?}/opt/node"
  source "${SCRIPT_DIR}/../sources/_first"
  source "${SCRIPT_DIR}/../sources/node"

  local NODE_VERSION="lts"
  n "${NODE_VERSION}"

  if ! command -v npm >/dev/null 2>&1; then
    return
  fi

  npm install --ignore-scripts -g npm npm-check-updates node-gyp yarn full-icu
}
