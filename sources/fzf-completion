#!/usr/bin/env bash

if ! command -v fzf > /dev/null 2>&1; then
  return
fi

if command -v fd > /dev/null 2>&1; then
  export FZF_DEFAULT_COMMAND='fd --hidden --follow --exclude .git --exclude node_modules --exclude vendor --exclude vendors'
  export FZF_CTRL_T_COMMAND="${FZF_DEFAULT_COMMAND}"
fi

if command -v git > /dev/null 2>&1; then
  function gitco() {
    local branch=`git branch -vv --all | fzf --ansi --reverse`
    git checkout `echo ${branch} | awk '{print $1}' | sed 's|^remotes/origin/||'`
  }

  function gitlg() {
    git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' "${@}" | fzf --ansi --reverse --tiebreak=index --no-sort --preview 'f() { set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}"); [ $# -eq 0 ] || git show --color=always $1; }; f {}'
  }
fi

if command -v pass > /dev/null 2>&1; then
  function _fzf_complete_pass() {
    FZF_COMPLETION_TRIGGER='' _fzf_complete '-1' "${@}" < <(
      local PASS_DIR=${PASSWORD_STORE_DIR-~/.password-store}
      find "${PASS_DIR}" -name '*.gpg' -print | sed -e "s|${PASS_DIR}/\(.*\)\.gpg$|\1|"
    )
  }
  [ -n "${BASH}" ] && complete -F _fzf_complete_pass -o default -o bashdefault pass

  function passfor() {
    pass -c "${1}"

    if [[ $? -eq 0 ]] && [[ $(pass show "${1}" | grep '^otpauth:' | wc -l) -eq 1 ]]; then
      read -s -p "  Press enter for otp"
      echo ""

      pass otp -c "${1}"
    fi
  }
  [ -n "${BASH}" ] && complete -F _fzf_complete_pass -o default -o bashdefault passfor

  function otpfor() {
    pass otp -c "${1}"

    read -s -p "  Press enter for password"
    echo ""

    pass -c "${1}"
  }
  [ -n "${BASH}" ] && complete -F _fzf_complete_pass -o default -o bashdefault otpfor

  function loginfor() { # Will only work in OSX because it uses pbcopy, fallback to passfor in other systems
    if [[ "${OSTYPE}" =~ ^darwin ]]; then
      local login="$(pass show "${1}" | grep '^login:')"
      if [[ $? -eq 0 ]] && [[ $(echo "${content}" | wc -l) -eq 1 ]]; then
        echo -n "$login" | sed -e 's/login://g' | awk '{$1=$1};1' | pbcopy

        echo "Copied ${1} login to clipboard."

        read -s -p "  Press enter for password"
        echo ""
      fi
    fi

    passfor "${1}"
  }
  [ -n "${BASH}" ] && complete -F _fzf_complete_pass -o default -o bashdefault loginfor

  passget() {
    if [[ ${#} -lt 1 ]]; then
      var_red "Usage: passget PASS_NAME PASS_FIELD"
      return 1
    fi

    local PASS_NAME="${1}"
    shift

    local PASS_FIELD="${1}"
    shift

    pass show "${PASS_NAME}" | grep "^${PASS_FIELD}: " | sed "s|^${PASS_FIELD}: ||"
  }
fi

if command -v make > /dev/null 2>&1; then
  function _fzf_complete_make() {
    FZF_COMPLETION_TRIGGER='' _fzf_complete '-1' "${@}" < <(make -rpn | sed -n -e '/^$/ { n ; /^[^ .#][^ ]*:/ { s/:.*$// ; p ; } ; }')
  }
  [ -n "${BASH}" ] && complete -F _fzf_complete_make -o default -o bashdefault make
fi

if command -v ssh > /dev/null 2>&1; then
  function _fzf_complete_ssh_notrigger() {
    FZF_COMPLETION_TRIGGER='' _fzf_host_completion
  }
  [ -n "${BASH}" ] && complete -F _fzf_complete_ssh_notrigger -o default -o bashdefault ssh
fi

if command -v pgcli > /dev/null 2>&1; then
  function _fzf_complete_pgcli() {
    FZF_COMPLETION_TRIGGER='' _fzf_complete '--ansi' '-1' "${@}" < <(
      var_color

      while IFS=':' read -r host port db user pass
      do
        if ! [[ "${host}" =~ ^\s*# ]]; then
          echo -e "host: ${BLUE}${host}${RESET} port: ${YELLOW}${port}${RESET} db: ${RED}${db}${RESET} user: ${GREEN}${user}${RESET}"
        fi
      done < "${PGPASSFILE-${HOME}/.pgpass}"
    )
  }

  function _fzf_complete_pgcli_post() {
    sed -E 's|host: ([^:]*) port: ([^:]*) db: ([^:]*) user: ([^:]*)|\1 \2 \3 \4|g' | \
    awk '{if ($1 != "*") { print "-h " $1; } if ($2 != "*") { print "-p " $2; } if ($3 != "*") { print "-U " $3; } if ($4 != "*") { print $4; }}'
  }

  [ -n "${BASH}" ] && complete -F _fzf_complete_pgcli -o default -o bashdefault pgcli
fi
