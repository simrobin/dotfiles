#!/usr/bin/env bash

if command -v kubectl >/dev/null 2>&1; then
  __kube_ps1() {
    # preserve exit status
    local exit="${?}"

    local K8S_CONTEXT
    K8S_CONTEXT="$(kubectl config view --minify --output=jsonpath --template='{..current-context}/{..namespace}' 2>/dev/null)"

    if [[ -n ${K8S_CONTEXT} ]]; then
      printf " ☸️  %s" "${K8S_CONTEXT}"
    fi

    return "${exit}"
  }

  if command -v fzf >/dev/null 2>&1 && command -v jq >/dev/null 2>&1 && command -v yq >/dev/null 2>&1; then
    kube() {
      get_kube_resources() {
        local RESOURCE="${1:-}"
        local QUERY="${2:-}"

        if [[ -n ${RESOURCE} ]] && [[ -z ${QUERY} ]]; then
          QUERY="${RESOURCE}"
          RESOURCE=""
        fi

        if [[ -z ${RESOURCE} ]]; then
          RESOURCE="deployments.apps"
        fi

        printf "%s/%s" "${RESOURCE}" "$(kubectl get "${RESOURCE}" --all-namespaces --output=json | jq -r '.items[].metadata | .namespace + "/" + .name' | fzf --height=20 --ansi --reverse -1 --query="${QUERY}")"
      }

      print_and_run() {
        printf "%b%b%b\n" "${YELLOW}" "${@}" "${RESET}" 1>&2
        eval "${@}"
      }

      local ACTION="${1}"
      shift

      case ${ACTION} in
      "context")
        local CONTEXT
        CONTEXT="$(kubectl config get-contexts -o name | fzf --height=20 --ansi --reverse -1 --query="${1:-}")"

        if [[ -n ${CONTEXT:-} ]]; then
          KUBECONFIG=$(mktemp -t kubeconfig)
          export KUBECONFIG="${KUBECONFIG}"
          cat "${HOME}/.kube/config" >>"${KUBECONFIG}"
          print_and_run "kubectl config use-context ${CONTEXT}"

          if [[ -n ${TMUX:-} ]]; then
            tmux setenv KUBECONFIG "${KUBECONFIG}"
          fi
        fi
        ;;

      "desc")
        IFS='/' read -r -a parts <<<"$(get_kube_resources "${@}")"

        if [[ -n ${parts[2]:-} ]]; then
          local EXTRA_ARGS=""
          if [[ -n ${parts[1]:-} ]]; then
            local EXTRA_ARGS+=" --namespace=${parts[1]}"
          fi

          print_and_run "kubectl describe ${parts[0]}${EXTRA_ARGS} ${parts[2]}"
        fi
        ;;

      "forward")
        IFS='/' read -r -a parts <<<"$(get_kube_resources "services" "${1:- }")"

        if [[ -n ${parts[1]:-} ]]; then
          local KUBE_PORT
          KUBE_PORT="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=json | jq -r '.spec.ports[] | (.port|tostring) + "/" + .protocol' | fzf --height=20 --ansi --reverse -1 --query="${2:-}")"

          if [[ -n ${KUBE_PORT:-} ]]; then
            IFS='/' read -r -a ports <<<"${KUBE_PORT}"
            printf "%bForwarding %s from ${3:-4000} to %s%b\n" "${BLUE}" "${parts[0]}/${parts[1]}/${parts[2]}" "${ports[0]}" "${RESET}"
            print_and_run "kubectl port-forward --namespace=${parts[1]} ${parts[0]}/${parts[2]} ${3:-4000}:${ports[0]}"
          fi
        fi
        ;;

      "image")
        IFS='/' read -r -a parts <<<"$(get_kube_resources "deployments.apps" "${1:- }")"

        if [[ -n ${parts[1]:-} ]]; then
          print_and_run "kubectl get ${parts[0]} --namespace=${parts[1]} ${parts[2]} --output=json | jq -r '.spec.template.spec.containers[].image'"
        fi
        ;;

      "info")
        IFS='/' read -r -a parts <<<"$(get_kube_resources "${@}")"

        if [[ -n ${parts[2]:-} ]]; then
          local EXTRA_ARGS=""
          if [[ -n ${parts[1]:-} ]]; then
            local EXTRA_ARGS+=" --namespace=${parts[1]}"
          fi

          local OUTPUT="--output=yaml"
          if [[ ${parts[0]} =~ secrets? ]]; then
            OUTPUT="--output=json | jq '.data[] |= @base64d'"
          fi
          OUTPUT="${OUTPUT} | yq eval --prettyPrint '.' -"

          print_and_run "kubectl get ${parts[0]}${EXTRA_ARGS} ${parts[2]} ${OUTPUT}"
        fi
        ;;

      "log" | "logs")
        local FIRST=""
        if ! [[ ${1:-} =~ ^- ]]; then
          FIRST="${1}"
          shift
        fi

        local SECOND=""
        if ! [[ ${1:-} =~ ^- ]]; then
          SECOND="${1}"
          shift
        fi

        IFS='/' read -r -a parts <<<"$(get_kube_resources "${FIRST}" "${SECOND}")"

        if [[ -n ${parts[1]:-} ]]; then
          local PODS_LABELS

          if [[ ${parts[0]} =~ ^cronjobs? ]]; then
            PODS_LABELS="job-name in ($(kubectl get jobs --namespace="${parts[1]}" --output json | jq --arg name "${parts[2]}" -r '.items[] | select(.metadata.ownerReferences[].name == $name) | .metadata.name' | paste -sd, -))"
          elif [[ ${parts[0]} =~ ^jobs? ]]; then
            PODS_LABELS="job-name=${parts[2]}"
          elif [[ ${parts[0]} =~ ^deployments? ]]; then
            PODS_LABELS="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=json | jq -r '.spec.selector.matchLabels | to_entries[] | .key + "=" + .value' | paste -sd, -)"
          else
            PODS_LABELS="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=json | jq -r '.metadata.labels | to_entries[] | .key + "=" + .value' | paste -sd, -)"
          fi

          printf "%bTailing logs for %b%s%b where labels are %b%s%b\n" "${BLUE}" "${GREEN}" "${parts[0]}/${parts[1]}/${parts[2]}" "${BLUE}" "${YELLOW}" "${PODS_LABELS}" "${RESET}"

          if command -v kail >/dev/null 2>&1; then
            print_and_run "kail --ns='${parts[1]}' --label='${PODS_LABELS}' --since=24h ${*}"
          else
            print_and_run "kubectl logs --namespace=${parts[1]} --ignore-errors --prefix --all-containers=true --selector='${PODS_LABELS}' --follow --since=24h ${*}"
          fi
        fi
        ;;

      "ns")
        kubectl get namespaces --output=json | jq -r '.items[].metadata.name' | fzf --height=20 --ansi --reverse -1 --query="${1:-}" | xargs kubectl config set-context --current --namespace
        ;;

      "restart")
        IFS='/' read -r -a parts <<<"$(get_kube_resources "${@}")"

        if [[ -n ${parts[1]:-} ]]; then
          print_and_run "kubectl rollout restart --namespace=${parts[1]} ${parts[0]} ${parts[2]}"
        fi
        ;;

      "watch")
        print_and_run "kubectl get pods --all-namespaces --watch ${*}"
        ;;

      *)
        printf "%bUsage: kube ACTION%b\n" "${RED}" "${RESET}" 1>&2
        printf "%b\nPossibles actions are                       | args\n%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - context | Switch context                 | name query%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - desc    | Describe an object             | type/name name?%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - forward | Port-forward to a service      | name query, service port number, exposed port number (default 4000)%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - image   | Print image name               | name query%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - info    | Print yaml output of an object | type/name name?%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - logs    | Tail logs                      | name query, additionnals 'kubectl logs' args...%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - ns      | Change default namespace       | name query%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - restart | Perform a rollout restart      | type/name name?%b\n" "${BLUE}" "${RESET}" 1>&2
        printf "%b - watch   | Watch pods of all namespaces   | additionnals 'kubectl get pods' args...%b\n" "${BLUE}" "${RESET}" 1>&2
        ;;
      esac
    }

    [[ -n ${BASH} ]] && complete -W "restart logs context desc forward image info logs ns restart watch" -o default -o bashdefault kube
  fi
fi
