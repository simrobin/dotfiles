#!/usr/bin/env bash

if command -v kubectl >/dev/null 2>&1; then
  __kube_ps1() {
    # preserve exit status
    local exit="${?}"

    local K8S_CONTEXT
    K8S_CONTEXT="$(kubectl config view --minify --output=jsonpath --template='{..current-context}/{..namespace}' 2>/dev/null)"

    if [[ -n ${K8S_CONTEXT} ]]; then
      printf " ☸️  %s" "${K8S_CONTEXT}"
    fi

    return "${exit}"
  }



  if command -v fzf >/dev/null 2>&1 && command -v yq >/dev/null 2>&1; then
    kube() {
      _kube_resources() {
        local RESOURCE="${1:-}"
        local QUERY="${2:-}"

        if [[ -n ${RESOURCE} ]] && [[ -z ${QUERY} ]]; then
          QUERY="${RESOURCE}"
          RESOURCE=""
        fi

        if [[ -z ${RESOURCE} ]]; then
          RESOURCE="deployments.apps"
        fi

        printf "%s/%s" "${RESOURCE}" "$(kubectl get "${RESOURCE}" --all-namespaces --output=yaml | yq eval '.items[].metadata | .namespace + "/" + .name' | fzf --height=20 --ansi --reverse --select-1 --query="${QUERY}")"
      }

      local ACTION="${1}"
      shift

      case ${ACTION} in
      "context")
        local CONTEXT
        CONTEXT="$(kubectl config get-contexts --output name | fzf --height=20 --ansi --reverse --select-1 --query="${1:-}")"

        if [[ -n ${CONTEXT:-} ]]; then
          KUBECONFIG_TMP=$(mktemp)
          cp "${KUBECONFIG:-${HOME}/.kube/config}" "${KUBECONFIG_TMP}"
          export KUBECONFIG="${KUBECONFIG_TMP}"
          var_print_and_run "kubectl config use-context ${CONTEXT}"

          if [[ -n ${TMUX:-} ]]; then
            tmux setenv KUBECONFIG "${KUBECONFIG}"
          fi
        fi
        ;;

      "desc")
        IFS='/' read -r -a parts <<<"$(_kube_resources "${@}")"

        if [[ -n ${parts[2]:-} ]]; then
          var_print_and_run "kubectl describe ${parts[0]} --namespace=${parts[1]} ${parts[2]}"
        fi
        ;;

      "edit")
        IFS='/' read -r -a parts <<<"$(_kube_resources "${@}")"

        if [[ -n ${parts[2]:-} ]]; then
          var_print_and_run "kubectl edit ${parts[0]} --namespace=${parts[1]} ${parts[2]}"
        fi
        ;;

      "env")
        IFS='/' read -r -a parts <<<"$(_kube_resources "deployments.apps" "${1:- }")"

        if [[ -n ${parts[1]:-} ]]; then
          local KUBE_CONTAINER
          KUBE_CONTAINER="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=yaml | yq eval '.spec.template.spec.containers[].name' | fzf --height=20 --ansi --reverse --select-1 --query="${2:-}" --prompt="Container:")"

          local DEPLOYMENT_YAML
          DEPLOYMENT_YAML="$(mktemp)"
          kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=yaml >"${DEPLOYMENT_YAML}"

          local ENV_FROMS
          ENV_FROMS="$(KUBE_CONTAINER="${KUBE_CONTAINER}" yq eval '.spec.template.spec.containers[] | select(.name == strenv(KUBE_CONTAINER) and has("envFrom")) | .envFrom[] | to_entries | .[] | (.key | sub("Ref$", "")) + "/" + .value.name' "${DEPLOYMENT_YAML}")"
          for envFrom in ${ENV_FROMS}; do
            IFS='/' read -r -a envConfig <<<"$(printf "%s" "${envFrom}")"
            local YQ_QUERY='.data | to_entries | .[] | .key + "=" + (.value | sub("[\n]", "\n"))'
            if [[ ${envConfig[0]} == "secret" ]]; then
              local YQ_QUERY='.data | to_entries | .[] | .key + "=" + (.value | @base64d | sub("[\n]", "\n"))'
            fi

            var_warning "${envConfig[0]} ${parts[1]}/${envConfig[1]}"
            kubectl get "${envConfig[0]}" --namespace="${parts[1]}" "${envConfig[1]}" --output=yaml | yq eval "${YQ_QUERY}"
          done

          KUBE_CONTAINER="${KUBE_CONTAINER}" yq eval '.spec.template.spec.containers[] | select(.name == strenv(KUBE_CONTAINER) and has("env")) | .env[] | select(has("value")) | .name + "=" + (.value | sub("[\n]", "\n"))' "${DEPLOYMENT_YAML}"

          eval "$(KUBE_CONTAINER="${KUBE_CONTAINER}" yq eval '.spec.template.spec.containers[] | select(.name == strenv(KUBE_CONTAINER) and has("env")) | .env[] | select((select(has("valueFrom")) | .valueFrom | has("fieldRef"))) | "printf \"%s=%s\n\" \"" + .name  + "\" \"$(yq eval '"'"'." + (.valueFrom.fieldRef.fieldPath | sub("'"'"'", "\"")) + "'"'"' \"'"${DEPLOYMENT_YAML}"'\")\""' "${DEPLOYMENT_YAML}")"

          eval "$(KUBE_CONTAINER="${KUBE_CONTAINER}" yq eval '.spec.template.spec.containers[] | select(.name == strenv(KUBE_CONTAINER) and has("env")) | .env[] | select((select(has("valueFrom")) | .valueFrom | has("resourceFieldRef"))) | "printf \"%s=%s\n\" \"" + .name  + "\" \"$(yq eval '"'"'.spec.template.spec.containers[] | select(.name == \"" + .valueFrom.resourceFieldRef.containerName + "\") | .resources." + (.valueFrom.resourceFieldRef.resource | sub("'"'"'", "\"")) + "'"'"' \"'"${DEPLOYMENT_YAML}"'\")\""' "${DEPLOYMENT_YAML}")"

          rm "${DEPLOYMENT_YAML}"
        fi
        ;;

      "forward")
        IFS='/' read -r -a parts <<<"$(_kube_resources "services" "${1:- }")"

        if [[ -n ${parts[1]:-} ]]; then
          local KUBE_PORT
          KUBE_PORT="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=yaml | yq eval '.spec.ports[] | .name' | fzf --height=20 --ansi --reverse --select-1 --query="${2:-}" --prompt="Port:")"

          if [[ -n ${KUBE_PORT:-} ]]; then
            local LOCAL_PORT="${3:-4000}"

            printf "%bForwarding %s from %s to %s%b\n" "${BLUE}" "${parts[0]}/${parts[1]}/${parts[2]}" "${LOCAL_PORT}" "${KUBE_PORT}" "${RESET}"
            var_print_and_run "kubectl port-forward --namespace=${parts[1]} ${parts[0]}/${parts[2]} ${LOCAL_PORT}:${KUBE_PORT}"
          fi
        fi
        ;;

      "image")
        IFS='/' read -r -a parts <<<"$(_kube_resources "deployments.apps" "${1:- }")"

        if [[ -n ${parts[1]:-} ]]; then
          var_print_and_run "kubectl get ${parts[0]} --namespace=${parts[1]} ${parts[2]} --output=yaml | yq eval '.spec.template.spec.containers[].image'"
        fi
        ;;

      "info")
        IFS='/' read -r -a parts <<<"$(_kube_resources "${@}")"

        if [[ -n ${parts[2]:-} ]]; then
          local QUERY="."
          if [[ ${parts[0]} =~ secrets? ]]; then
            QUERY=".data[] |= @base64d"
          fi

          var_print_and_run "kubectl get ${parts[0]} --namespace=${parts[1]} ${parts[2]} --output=yaml | yq eval --prettyPrint '${QUERY}'"
        fi
        ;;

      "log" | "logs")
        local FIRST=""
        if ! [[ ${1:-} =~ ^- ]]; then
          FIRST="${1}"
          shift
        fi

        local SECOND=""
        if ! [[ ${1:-} =~ ^- ]]; then
          SECOND="${1}"
          shift
        fi

        IFS='/' read -r -a parts <<<"$(_kube_resources "${FIRST}" "${SECOND}")"

        if [[ -n ${parts[1]:-} ]]; then
          local PODS_LABELS

          if [[ ${parts[0]} =~ ^cronjobs? ]]; then
            PODS_LABELS="job-name in ($(kubectl get jobs --namespace="${parts[1]}" --output yaml | OWNER_NAME="${parts[2]}" yq eval '.items[] | select(.metadata.ownerReferences[].name == strenv(OWNER_NAME)) | .metadata.name' | paste -sd, -))"
          elif [[ ${parts[0]} =~ ^jobs? ]]; then
            PODS_LABELS="job-name=${parts[2]}"
          elif [[ ${parts[0]} =~ ^deployments? ]]; then
            PODS_LABELS="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=yaml | yq eval '.spec.selector.matchLabels | to_entries | .[] | .key + "=" + .value' | paste -sd, -)"
          else
            PODS_LABELS="$(kubectl get "${parts[0]}" --namespace="${parts[1]}" "${parts[2]}" --output=yaml | yq eval '.metadata.labels | to_entries | .[] | .key + "=" + .value' | paste -sd, -)"
          fi

          printf "%bTailing logs for %b%s%b where labels are %b%s%b\n" "${BLUE}" "${GREEN}" "${parts[0]}/${parts[1]}/${parts[2]}" "${BLUE}" "${YELLOW}" "${PODS_LABELS}" "${RESET}"

          if command -v kail >/dev/null 2>&1; then
            var_print_and_run "kail --ns='${parts[1]}' --label='${PODS_LABELS}' --since=24h ${*}"
          else
            var_print_and_run "kubectl logs --namespace=${parts[1]} --ignore-errors --prefix --all-containers=true --selector='${PODS_LABELS}' --follow --since=24h ${*}"
          fi
        fi
        ;;

      "ns")
        kubectl get namespaces --output=yaml | yq eval '.items[].metadata.name' | fzf --height=20 --ansi --reverse --select-1 --query="${1:-}" | xargs kubectl config set-context --current --namespace
        ;;

      "restart")
        IFS='/' read -r -a parts <<<"$(_kube_resources "${@}")"

        if [[ -n ${parts[1]:-} ]]; then
          var_print_and_run "kubectl rollout restart --namespace=${parts[1]} ${parts[0]} ${parts[2]}"
        fi
        ;;

      "watch")
        var_print_and_run "kubectl get pods --watch ${*}"
        ;;

      *)
        var_red "Usage: kube ACTION"

        var_info "\nPossibles actions are                            | args\n"
        var_info " - context | Switch context                      | <context name>"
        var_info " - desc    | Describe an object                  | <object type or deployment name> <object name>?"
        var_info " - edit    | Edit an object                      | <object type or deployment name> <object name>?"
        var_info " - env     | Generate .env file from deployments | <deployment name> <container name>?"
        var_info " - forward | Port-forward to a service           | <service name> <service port number>? <exposed port number>? (default 4000)"
        var_info " - image   | Print image name                    | <deployment name>"
        var_info " - info    | Print yaml output of an object      | <object type or deployment name> <object name>?"
        var_info " - logs    | Tail logs                           | <object type or deployment name> <object name>? <any additionnals 'kubectl logs' args...>"
        var_info " - ns      | Change default namespace            | <namespace name>"
        var_info " - restart | Perform a rollout restart           | <object type or deployment name> <object name>?"
        var_info " - watch   | Watch pods of all namespaces        | <any additionnals 'kubectl get pods' args...>"

        return 1
        ;;
      esac
    }

    _fzf_complete_kube() {
      if [[ ${COMP_CWORD} -eq 1 ]]; then
        mapfile -t COMPREPLY < <(compgen -W "context desc edit env forward image info logs ns restart watch" -- "${COMP_WORDS[COMP_CWORD]}")
        return
      fi

      case ${COMP_WORDS[COMP_CWORD - 1]} in
      "context")
        FZF_COMPLETION_TRIGGER="" _fzf_complete --select-1 "${@}" < <(
          kubectl config get-contexts --output name
        )
        ;;

      "forward")
        FZF_COMPLETION_TRIGGER="" _fzf_complete --select-1 "${@}" < <(
          kubectl get services --all-namespaces --output=yaml | yq eval '.items[].metadata.name'
        )
        ;;

      "edit")
        FZF_COMPLETION_TRIGGER="" _fzf_complete --select-1 "${@}" < <(
          kubectl get deployments.apps --all-namespaces --output=yaml | yq eval '.items[].metadata.name'
        )
        ;;

      "env")
        FZF_COMPLETION_TRIGGER="" _fzf_complete --select-1 "${@}" < <(
          kubectl get deployments.apps --all-namespaces --output=yaml | yq eval '.items[].metadata.name'
        )
        ;;

      "image")
        FZF_COMPLETION_TRIGGER="" _fzf_complete --select-1 "${@}" < <(
          kubectl get deployments.apps --all-namespaces --output=yaml | yq eval '.items[].metadata.name'
        )
        ;;

      "ns")
        FZF_COMPLETION_TRIGGER="" _fzf_complete --select-1 "${@}" < <(
          kubectl get namespaces --output=yaml | yq eval '.items[].metadata.name'
        )
        ;;
      esac
    }

    [[ -n ${BASH} ]] && complete -F _fzf_complete_kube -o default -o bashdefault kube
  fi

  kross() {
    _kross_help() {
      var_red "Usage: kross [options?] <context's regexp> ARGS..."

      var_info "\nPossibles options are\n"
      var_info " - -c Run alternative program than kubectl (with --context arg)"
    }

    if [[ ${#} -lt 2 ]]; then
      _kross_help
      return 1
    fi

    local COMMAND="kubectl"

    OPTIND=0
    while getopts ":c:" option; do
      case "${option}" in
      c)
        COMMAND="${OPTARG}"
        ;;
      :)
        printf "option -%s requires a value\n" "${OPTARG}" >&2
        return 1
        ;;
      \?)
        printf "option -%s is invalid\n" "${OPTARG}" >&2
        return 2
        ;;
      *)
        _kross_help
        return 1
        ;;
      esac
    done

    shift $((OPTIND - 1))

    local CONTEXT_REGEXP="${1:-}"
    shift

    for ctx in $(kubectl config get-contexts --output name); do
      if ! [[ ${ctx} =~ ${CONTEXT_REGEXP} ]]; then
        continue
      fi

      tmux_split_cmd "var_print_and_run \"${COMMAND} --context '${ctx}' ${*}\""
    done
  }
fi
