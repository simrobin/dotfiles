#!/usr/bin/env bash

if ! command -v git >/dev/null 2>&1; then
  return
fi

if command -v __git_complete >/dev/null 2>&1; then
  __git_complete g __git_main
fi

alias g='git'
alias ...="git_root"

git_info() {
  git rev-parse --is-inside-work-tree &>/dev/null || return
  branch=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')
  dirty=$(
    git diff --quiet --ignore-submodules HEAD &>/dev/null
    [ $? -eq 1 ] && echo -e "*"
  )

  echo " ("$branch$dirty")"
}

git_is_inside() {
  git rev-parse --is-inside-work-tree 2>&1
}

git_root() {
  if [[ $(git_is_inside) != "true" ]]; then
    pwd
    return
  fi

  git rev-parse --show-toplevel
}

git_browse() {
  while IFS= read -r -d '' dir; do
    (
      cd "${dir}" || return
      if [[ $(git_is_inside) != "true" ]] || [[ $(pwd) != $(git_root) ]]; then
        return
      fi

      echo "Running command in ${dir}"
      eval "${@}"
    )
  done < <(find . -type d -maxdepth 1 -print0)
}

git_pull_all() {
  git_browse 'git checkout master && git pull && git sweep'
}

git_remote_repository() {
  if [[ $(git_is_inside) != "true" ]]; then
    return
  fi

  local REMOTE_URL
  REMOTE_URL="$(git remote get-url --push "$(git remote show | head -1)")"

  if [[ ${REMOTE_URL} =~ ^.*@.*:(.*)\/(.*).git$ ]]; then
    printf "%s/%s" "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
  fi
}

head_sync() {
  if [[ ${#} -ne 2 ]]; then
    echo "Usage: head_sync REMOTE_SERVER REMOTE_PATH"
    return 1
  fi

  local REMOTE_SERVER="${1}"
  shift
  local REMOTE_PATH="${1}"
  shift

  local branch=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')
  ssh -A "${REMOTE_SERVER}" "cd '${REMOTE_PATH}' && git reset HEAD . && git clean -f && git status -u -s | awk '{print \$2}' | xargs -r rm -rf && git checkout -- . && git fetch && git checkout '${branch}' && git pull"
}

git_sync() {
  if [[ "${#}" -lt 2 ]]; then
    echo "Usage: git_sync [REMOTE_SERVER] [REMOTE_PATH] [DRY]?"
    return 1
  fi

  local RED='\033[0;31m'
  local GREEN='\033[0;32m'
  local YELLOW='\033[0;33m'
  local BLUE='\033[0;34m'
  local RESET='\033[0m'

  git_root
  isGit=$?
  if [[ ${isGit} -ne 0 ]]; then
    return ${isGit}
  fi

  cd $(git_root)

  local REMOTE_PATH_PREFIX="~/${2}"
  if [[ "${2:0:1}" == "/" ]]; then
    REMOTE_PATH_PREFIX="${2}"
  fi

  local dry=false
  if [[ "$(echo ${3} | tr '[:upper:]' '[:lower:]')" == "dry" ]]; then
    dry=true
  fi

  if [[ "${dry}" == true ]]; then
    echo -e "${BLUE}Dry run of syncing files...${RESET}\n"
  else
    echo -e "${BLUE}Syncing files...${RESET}\n"
  fi

  local toSync=()
  local toDelete=()

  local IFS=$'\n'
  for gitFile in $(git status --porcelain); do
    local prefix="${gitFile:0:2}"
    local trimmedPrefix="${prefix#[[:space:]]}"

    case "${trimmedPrefix:0:1}" in
    "M" | "A" | "?")
      toSync=("${toSync[@]}" "${gitFile:3}")
      ;;

    "D")
      toDelete=("${toDelete[@]}" "${REMOTE_PATH_PREFIX}/${gitFile:3}")
      ;;

    "R")
      local originFile=$(echo -n "${gitFile}" | awk '{print $2}')
      local destinationFile=$(echo -n "${gitFile}" | awk '{print $4}')

      toDelete=("${toDelete[@]}" "${REMOTE_PATH_PREFIX}/${originFile}")
      toSync=("${toSync[@]}" "${destinationFile}")
      ;;

    *)
      echo -e "${BLUE} ¯\_(ツ)_/¯ Don't know how to handle ${gitFile}${RESET}"
      ;;
    esac
  done

  if ! ${dry}; then
    echo -e "${YELLOW}Cleaning remote${RESET}\n"
    ssh "${1}" "cd ${REMOTE_PATH_PREFIX} && git clean -f && git checkout -- ."
  fi

  if [[ "${#toDelete[@]}" -ne 0 ]]; then
    ! ${dry} && ssh "${1}" "rm -rf ${toDelete[@]}"
    echo -e "${RED} - Deleted\n${toDelete[*]}${RESET}\n"
  fi

  if [[ "${#toSync[@]}" -ne 0 ]]; then
    ! ${dry} && rsync -raR "${toSync[@]}" "${1}:${REMOTE_PATH_PREFIX}/"
    echo -e "${GREEN} + Copied\n${toSync[*]}${RESET}\n"
  fi

  echo -e "${BLUE}Done!${RESET}"
  echo
}

watch_sync() {
  if [[ -z "${NO_HEAD_SYNC:-}" ]]; then
    head_sync "${@}"
  fi

  git_sync "${@}"

  fswatch -0 -o --exclude=.git/ . | while read -d "" event; do
    git_sync "${@}"
  done
}
